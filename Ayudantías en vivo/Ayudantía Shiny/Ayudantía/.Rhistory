knitr::opts_chunk$set(echo = TRUE)
plot(dbinom(0:3,3,1/3))
plot(dbinom(0:3,3,1/3,type="h",xlab="k",ylab="P(X=k)"))
plot(dbinom(0:3,3,1/3), type="h",xlab="k",ylab="P(X=k)")
plot(dbinom(c(0, 1, 2, 3),3,1/3), type="h",xlab="k",ylab="P(X=k)")
plot(dbinom(0:3,3,1/3), type="h",xlab="k",ylab="P(X=k)")
plot(dbinom(0:3,4,1/3), type="h",xlab="k",ylab="P(X=k)")
plot(dbinom(0:3,3,1/3), type="h",xlab="k",ylab="P(X=k)")
plot(dbinom(0:3, 3, 1/3), type="h",xlab="x",ylab="P(X=x)")
plot(dbinom(0, 3, 1/3), type="h",xlab="x",ylab="P(X=x)")
plot(dbinom(0:3, 4, 1/3), type="h",xlab="x",ylab="P(X=x)")
plot(dbinom(0:3, 3, 1/3), type="h",xlab="x",ylab="P(X=x)")
plot(dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)")
plot(stepfun(0:3,pbinom(0:3,3, 1/3)),xlab="x",ylab="F(x)")
plot(stepfun(0:3, pbinom(0:4,3, 1/3)),xlab="x",ylab="F(x)")
plot(dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)")
plot(stepfun(0:3, pbinom(0:4,3, 1/3)),xlab="x",ylab="F(x)", main= "")
dbinom(0:3, 3, 1/3)
plot(0:3,dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)")
plot(0:3,dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)")
grid()
plot(0:3,dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)")
grid()
plot(stepfun(0:3, pbinom(0:4,3, 1/3)), xlab="x",ylab="F(x)", main= "")
dbinom(0:3, 3, 1/3)
plot(0:3,dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)")
plot(stepfun(0:3, pbinom(0:4,3, 1/3)), xlab="x",ylab="F(x)", main= "")
dbinom(0:3, 3, 1/3)
plot(stepfun(0:3, pbinom(0:4,3, 1/3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5))
plot(0:3,dbinom(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)",)
## Función de prob
plot(0:3,dbern(0:3, 3, 1/3), type="h",xlab="x", ylab="P(X=x)",)
plot(c(0, 1), c(2/3,  1/3),type="h",xlab="x", ylab="P(X=x)" )
# Bernulli
## Función de prob
plot(c(0, 1), c(2/3,  1/3),type="h",xlab="x", ylab="P(X=x)")
# Bernulli
## Función de prob
plot(c(0, 1), c(2/3,  1/3),type="h",xlab="x", ylab="P(X=x)",
ylim = c(0, 1))
## Función distribución acumulada.
plot(stepfun(0:1, c(0,  2/3,  1/3), xlab="x",
## Función distribución acumulada.
plot(stepfun(0:1, c(0,  2/3,  1/3), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5)))
## Función distribución acumulada.
plot(stepfun(0:1, c(0,  2/3,  1/3), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5)))
## Función distribución acumulada.
plot(stepfun(0:1, c(0,  2/3,  1/3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5))
pbinom(0:4,3, 1/3)
cumsum(c(0,  2/3,  1/3))
## Función distribución acumulada.
plot(stepfun(0:1, cumsum(c(0,  2/3,  1/3))), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5))
## Función distribución acumulada.
plot(stepfun(0:3, pbinom(0:4,3, 1/3)), xlab="x",
ylab="F(x)", main= "")
## Función distribución acumulada.
plot(stepfun(0:1, cumsum(c(0,  2/3,  1/3))), xlab="x",
ylab="F(x)", main= "")
## Función distribución acumulada.
plot(stepfun(0:1, cumsum(c(0,  2/3,  1/3))), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 1.5))
dunif(0:3, 1/3, 1)
dunif(0:3, 1/3, 3)
## Función de prob
plot(0:3, dunif(0:3, 1/3, 3), type="h",xlab="x", ylab="P(X=x)",)
## Función de prob
plot(0:3,dbinom(0:3, 3, 1/3))
## Función de prob
plot(dbinom(0:3, 3, 1/3))
## Función de prob
curve(dbinom(0:3, 3, 1/3))
## Función de prob
curve(dunif(0:3, 1/3, 3), type="h",xlab="x", ylab="P(X=x)",)
## Función de prob
curve(dunif(0:3, 1/3, 3))
## Función de prob
curve(dunif(x, 1/3, 3), from= 0, to= 3)
## Función distribución acumulada.
plot(stepfun(0:3, punid(0:4,1/3, 3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5))
## Función distribución acumulada.
plot(stepfun(0:3, punif(0:4,1/3, 3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5))
## Función distribución acumulada.
plot(stepfun(0:3, punif(0:4,1/3, 3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 3.5))
## Función distribución acumulada.
plot(stepfun(0:3, pbinom(0:4,3, 1/3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 4.5))
## Función distribución acumulada.
plot(stepfun(0:3, pbinom(0:4,3, 1/3)), xlab="x",
ylab="F(x)", main= "", xlim = c(-0.5, 3.5))
## Función de prob
plot(dbinom(0:3, 3, 1/3))
## Función de prob
curve(dunif(x, 1/3, 3), from= 0, to= 3)
## Función de prob
curve(dunif(x, 1/3, 3), from= 0, to= 3, ylab="P(X=x)")
## Función de prob
plot(dnbinom(0:3, 3, 1/3),type="h",xlab="x", ylab="P(X=x)")
## Función de prob
plot(0:3, dnbinom(0:3, 3, 1/3),type="h",xlab="x", ylab="P(X=x)")
## Función de prob
plot(0:3, dnbinom(0:3, 3, 1/3),type="h",xlab="x", ylab="P(X=x)", ylim = c(0, 1))
## Función de prob
plot(0:3, dnbinom(0:3, 3, 1/3),type="h",xlab="x", ylab="P(X=x)")
## Función de prob
plot(0:3, dnbinom(0:3, 3, 1/3),type="h",xlab="x", ylab="P(X=x)")
library(xaringanthemer)
library(xaringanthemer)
style_mono_light(base_color = "#534e7b",
#style_duo(
# primary_color = "#576675",
# secondary_color="#f5f5dc", # FF7373
header_font_google = google_font("KoHo"),
text_font_google   = google_font("Roboto"),
code_font_google   = google_font("Fira Mono")
)
library(emo)
install.packages("emo")
install.packages("emo")
library(xaringanthemer)
devtools::install_github("hadley/emo")
library(emo)
style_mono_light(base_color = "#534e7b",
#style_duo(
# primary_color = "#576675",
# secondary_color="#f5f5dc", # FF7373
header_font_google = google_font("KoHo"),
text_font_google   = google_font("Roboto"),
code_font_google   = google_font("Fira Mono")
)
shiny::runApp('~/pokedash')
runApp('~/pokedash')
