names(list_paises)<-substr(dir_archivos, 19, nchar(dir_archivos)-4)
list.files("Base_Instacart", pattern = "\\.csv$", full.names = FALSE)
nombres<- list.files("Base_Instacart", pattern = "\\.csv$", full.names = FALSE)
Datas<-lapply(nombres,"read_csv")  #Carga todos los archivos csv en la carpeta Base_Instacart
Datas
nombres<- list.files("Base_Instacart", pattern = "\\.csv$", full.names = FALSE)
Datas<-lapply(nombres,"read_csv")  #Carga todos los archivos csv en la carpeta Base_Instacart
nombres<- list.files("Base_Instacart", pattern = "\\.csv$", full.names = TRUE)
Datas<-lapply(nombres,"read_csv")  #Carga todos los archivos csv en la carpeta Base_Instacart
Datas<-map(nombres, "read_csv")
Datas
Datas<-lapply(nombres,"read_csv")  #Carga todos los archivos csv en la carpeta Base_Instacart
Datas
Datas<-map(nombres, read_csv)
Datas
names(Datas)<-substr(nombres,1,nchar(nombres)-4) #Añade nombre a cada data
names(Datas)<-substr(nombres,15,nchar(nombres)-4) #Añade nombre a cada data
names(Datas)<-substr(nombres,16,nchar(nombres)-4) #Añade nombre a cada data
Datas$departments
cruce<-Datas$order_products__train%>%
left_join(., Datas$products, by="product_id")%>%
left_join(., Datas$departments, by="department_id")
library(skimr)
names(cruce)
names(skim(cruce))
skim(cruce)
cruce
skim(cruce)
names(skim(cruce))
skim(cruce)$n_missing
filtrofrozen<-cruce%>%
filter(department=="frozen")%>%
group_by(order_id)%>%
count()
head(filtrofrozen, 5)
ggplot(filtrofrozen, aes(n))+
geom_histogram(bins=20)+
theme_minimal()
datos<-map(c("pets", "breakfast", "frozen", "produce"),
function(d){
filtro<-cruce%>%
filter(department==d)%>%
group_by(order_id)%>%
count()
return(filtro)
})
datos
plots
plots<-map(c("pets", "breakfast", "frozen", "produce"),
function(d){
filtro<-cruce%>%
filter(department==d)%>%
group_by(order_id)%>%
count()
return(ggplot(filtro, aes(n))+
geom_histogram(bins=20)+
theme_minimal() +
ggtitle(paste("Products delivered per order in category", d)))
})
plots
map(
seq_along(plots),
function(g) {
ggsave(sprintf("category %s.png", g), plots[[g]])
}
)
map(
seq_along(plots),
function(g) {
ggsave(sprintf("category %s.png", g), plots[[g]])
}
)
library(randomNames)
library(dplyr)
library(ggplot2)
library(readr)
library(purrr)
library(skimr)
library(randomNames)
library(dplyr)
library(ggplot2)
library(readr)
library(purrr)
library(skimr)
library(randomNames)
#Paquetes necesarios:
library(randomNames)
library(randomNames)
library(dplyr)
library(ggplot2)
library(readr)
library(purrr)
library(skimr)
#--------------------------------------------------------------
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
nombres
?randomNames
nombres
#--------------------------------------------------------------
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
head(nombres)
#--------------------------------------------------------------
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
head(nombres)
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
head(nombres)
#--------------------------------------------------------------
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
runif(150, min=1, max=7)
round(runif(150, min=1, max=7),1)
matrix(round(runif(150, min=1, max=7),1), ncol=3)
set.seed(2021) #Fija semilla 2021
interrogaciones<-matrix(round(runif(150, min=1, max=7),1), ncol=3) #Crea una matriz con calificaciones aleatorias
interrogaciones
laboratorio<-round(runif(nrow(interrogaciones), min=4.5, max=7),1)
laboratorio
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
set.seed(2021) #Fija semilla 2021
interrogaciones<-matrix(round(runif(150, min=1, max=7),1), ncol=3) #Crea una matriz con calificaciones aleatorias
laboratorio<-round(runif(nrow(interrogaciones), min=4.5, max=7),1)
data<-data.frame(nombres, interrogaciones, laboratorio)
data
set.seed(2021) #Fija semilla 2021
laboratorio<-round(runif(nrow(interrogaciones), min=4.5, max=7),1)
laboratorio
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
set.seed(2021) #Fija semilla 2021
interrogaciones<-matrix(round(runif(150, min=1, max=7),1), ncol=3) #Crea una matriz con calificaciones aleatorias
set.seed(2021) #Fija semilla 2021
laboratorio<-round(runif(nrow(interrogaciones), min=4.5, max=7),1)
data<-data.frame(nombres, interrogaciones, laboratorio)
data
names(data)<-c("Nombre", "I1", "I2", "I3", "prom_laboratorio")
head(data)
?matrix
df<-data
((df$I1+df$I2+df$I3)/3)*0.7+df$prom_laboratorio*0.3
round(((df$I1+df$I2+df$I3)/3)*0.7+df$prom_laboratorio*0.3, 2)
df<-data
df$NP<-round(((df$I1+df$I2+df$I3)/3)*0.7+df$prom_laboratorio*0.3, 2)
head(df)
df$resultado<-NA
head(df)
for(i in 1: nrow(df)){
if((df$NP[i]>=5)&(df$I1[i]>=4)&(df$I2[i]>=4)&(df$I3[i]>=4)){
df$resultado[i]<-"Aprueba sin examen"
}
else if(df$NP[i]<3.95){
df$resultado[i]<-"Reprueba con opción a rendir examen"
}
else{
df$resultado[i]<-"Rinde examen"
}
}
}
for(i in 1: nrow(df)){
if((df$NP[i]>=5)&(df$I1[i]>=4)&(df$I2[i]>=4)&(df$I3[i]>=4)){
df$resultado[i]<-"Aprueba sin examen"
}
else if(df$NP[i]<3.95){
df$resultado[i]<-"Reprueba con opción a rendir examen"
}
else{
df$resultado[i]<-"Rinde examen"
}
}
head(df)
resultado_examen1<-function(df){
df$NP<-round(((df$I1+df$I2+df$I3)/3)*0.7+df$prom_laboratorio*0.3, 2)
df$resultado<-NA
for(i in 1: nrow(df)){
if((df$NP[i]>=5)&(df$I1[i]>=4)&(df$I2[i]>=4)&(df$I3[i]>=4)){
df$resultado[i]<-"Aprueba sin examen"
}
else if(df$NP[i]<3.95){
df$resultado[i]<-"Reprueba con opción a rendir examen"
}
else{
df$resultado[i]<-"Rinde examen"
}
}
return(list("Notas"=df[,1:5], "Status"=df[, c(1, 7)]))
}
resultado_examen1(data)
resultado_examen1(data)$Notas
resultado_examen1(data)$Status
df<-data
df
head(df[,-1])
?apply
resultado_examen2<-function(df){
df$NP<-apply(df[,-1], MARGIN=1, FUN=fun(x){
((x[1]+x[2]+x[3])/3)*0.7+x[4]*0.3})
df$resultado<-NA
for(i in 1: nrow(df)){
if((df$NP[i]>=5)&(df$I1[i]>=4)&(df$I2[i]>=4)&(df$I3[i]>=4)){
df$resultado[i]<-"Aprueba sin examen"
}
else if(df$NP[i]<3.95){
df$resultado[i]<-"Reprueba con opción a rendir examen"
}
else{
df$resultado[i]<-"Rinde examen"
}
}
return(list("Notas"=df[,1:5], "Status"=df[, c(1, 7)]))
}
df$NP<-apply(df[,-1], MARGIN=1, FUN=fun(x){
((x[1]+x[2]+x[3])/3)*0.7+x[4]*0.3} )
resultado_examen2<-function(df){
df$NP<-apply(df[,-1], MARGIN=1, FUN=function(x){
((x[1]+x[2]+x[3])/3)*0.7+x[4]*0.3} )
df$resultado<-NA
for(i in 1: nrow(df)){
if((df$NP[i]>=5)&(df$I1[i]>=4)&(df$I2[i]>=4)&(df$I3[i]>=4)){
df$resultado[i]<-"Aprueba sin examen"
}
else if(df$NP[i]<3.95){
df$resultado[i]<-"Reprueba con opción a rendir examen"
}
else{
df$resultado[i]<-"Rinde examen"
}
}
return(list("Notas"=df[,1:5], "Status"=df[, c(1, 7)]))
}
resultado_examen2(data)$Notas
resultado_examen2(data)$Status
df<-data
df<-df%>%
mutate(NP=round(((I1+I2+I3)/3)*0.7+prom_laboratorio*0.3, 2))
df
df<-data
df<-df%>%
mutate(NP=round(((I1+I2+I3)/3)*0.7+prom_laboratorio*0.3, 2),
resultado=ifelse((NP>=5)&(I1>=4)&(I2>=4)&(I3>=4)),
"Aprueba sin examen", ifelse(NP<3.95, "Reprueba con opción de rendir examen",
"Rinde examen"))
df<-df%>%
mutate(NP=round(((I1+I2+I3)/3)*0.7+prom_laboratorio*0.3, 2),
resultado=ifelse((NP>=5)&(I1>=4)&(I2>=4)&(I3>=4),
"Aprueba sin examen",
ifelse(NP<3.95, "Reprueba con opción de rendir examen",
"Rinde examen")))
df
resultado_examen3<-function(df){
df<-df%>%
mutate(NP=round(((I1+I2+I3)/3)*0.7+prom_laboratorio*0.3, 2),
resultado=ifelse((NP>=5)&(I1>=4)&(I2>=4)&(I3>=4),
"Aprueba sin examen",
ifelse(NP<3.95, "Reprueba con opción de rendir examen",
"Rinde examen")))
return(list("Notas"=df[,1:5], "Status"=df[, c(1, 7)]))
}
resultado_examen3(data)$Notas
resultado_examen3(data)$Status
system.time(resultado_examen1(data))
system.time(resultado_examen2(data))
system.time(resultado_examen3(data))
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(10000, ethnicity = 4) #Generador de nombres aleatorios hispánicos
set.seed(2021) #Fija semilla 2021
interrogaciones<-matrix(round(runif(30000, min=1, max=7),1), ncol=3) #Crea una matriz con calificaciones aleatorias
set.seed(2021) #Fija semilla 2021
laboratorio<-round(runif(nrow(interrogaciones), min=4.5, max=7),1)
data<-data.frame(nombres, interrogaciones, laboratorio)
names(data)<-c("Nombre", "I1", "I2", "I3", "prom_laboratorio")
system.time(resultado_examen1(data))
?system.time
system.time(resultado_examen1(data))
system.time(resultado_examen2(data))
system.time(resultado_examen3(data))
system.time(resultado_examen1(data))
system.time(resultado_examen2(data))
system.time(resultado_examen3(data))
system.time(resultado_examen1(data))
system.time(resultado_examen2(data))
system.time(resultado_examen3(data))
system.time(resultado_examen1(data))
system.time(resultado_examen2(data))
system.time(resultado_examen3(data))
resultado_examen3(data)$Status
table(resultado_examen3(data)$Status)
table(resultado_examen3(data)$Status[,2])
#--------------------------------------------------------------
set.seed(2021) #Fija semilla 2021
nombres<-randomNames(50, ethnicity = 4) #Generador de nombres aleatorios hispánicos
set.seed(2021) #Fija semilla 2021
interrogaciones<-matrix(round(runif(150, min=1, max=7),1), ncol=3) #Crea una matriz con calificaciones aleatorias
set.seed(2021) #Fija semilla 2021
laboratorio<-round(runif(nrow(interrogaciones), min=4.5, max=7),1)
data<-data.frame(nombres, interrogaciones, laboratorio)
names(data)<-c("Nombre", "I1", "I2", "I3", "prom_laboratorio")
resultado_examen3(data)$Status
table(resultado_examen3(data)$Status[,2])
ggplot(resultado_examen3(data)$Status, aes(Status))+geom_bar()
resultado_examen3(data)$Status
ggplot(resultado_examen3(data)$Status, aes(resultado))+geom_bar()
ggplot(resultado_examen3(data)$Status, aes(resultado))+
geom_bar(aes(y=(..count..)/sum(..count..)))
ggplot(resultado_examen3(data)$Status, aes(resultado))+
geom_bar(aes(y=(..count..)/sum(..count..)))+ylim(0,1)
ggplot(resultado_examen3(data)$Status, aes(resultado))+
geom_bar(aes(y=(..count..)/sum(..count..)))
ggplot(resultado_examen3(data)$Status, aes(resultado))+
geom_bar(aes(y=(..count..)/sum(..count..)))+ylim(0,1)
fib<-function(n){
if(n==1){
return(0)
}
else if (n==2){
return(1)
}
else (n>2){
return(fib(n-1)+fib(n-2))
}
}
fib<-function(n){
if(n==1){
return(0)
}
else if (n==2){
return(1)
}
else {
return(fib(n-1)+fib(n-2))
}
}
fib(4)
fib(10)
fib(100)
fib2<-function(n){
valores<-c()
valores[1]<-0
valores[2]<-1
i<-2
while(i<=n){
next_val<-sum(tail(valores, 2))
valores<-c(valores, next_val)
i<-i+1
}
return(valores[n])
}
fib2(4)
fib2(10)
system.time(fib(30))
system.time(fib2(30))
system.time(fib(30))
system.time(fib2(30))
system.time(fib(30))
system.time(fib2(30))
system.time(fib(30))
system.time(fib2(30))
getwd()
setwd("C:/Users/Naty/Documents/GitHub/Ayudantias-Diplomado/Ayudantía Programación y Funciones")
dir_archivos<-list.files("Bases_Continentes", full.names = TRUE)
dir_archivos
dir_archivos
dir_archivos
df_paises<-map_df(dir_archivos, read_csv)
head(df_paises)
dir_archivos
dir_archivos
list_paises<-map(dir_archivos, read_csv)
list_paises
list_paises[[1]]
list_paises[[2]]
dir_archivos
substr(dir_archivos, 19, nchar(dir_archivos)-4)
names(list_paises)<-substr(dir_archivos, 19, nchar(dir_archivos)-4)
list_paises$Africa
list_paises$Asia
substr(c("hola", "que tal"), 2, 4)
dir_archivos
nchar(dir_archivos)
substr(dir_archivos, 19, nchar(dir_archivos)-4)
nombres<-list.files("Base_Instacart", full.names=TRUE)
nombres
Datas<-map(nombres, read_csv)
Datas
nombres
names(Datas)<-substr(nombres, 16, nchar(nombres)-4)
Datas$departments
Datas$order_products__train
Datas$products
setwd()
getwd()
cruce<-Datas$order_products__train%>%
left_join(., Datas$products, by="product_id")%>%
left_join(., Datas$departments, by="department_id")
View(cruce)
skim(cruce)$n_missing
filtrofrozen<-cruce%>%
filter(departament=="frozen")%>%
group_by(order_id)%>%
count()
filtrofrozen<-cruce%>%
filter(department=="frozen")%>%
group_by(order_id)%>%
count()
filtrofrozen
ggplot(filtrofrozen, aes(n))+
geom_histogram()
ggplot(filtrofrozen, aes(n))+
geom_histogram(bins=20)
ggplot(filtrofrozen, aes(n))+
geom_histogram(bins=20)+
theme_minimal()
datos<-map(c("pets", "breakfast", "frozen", "produce"),
function(d){
df<-cruce%>%
filter(department==d)%>%
group_by(order_id)%>%
count()
return(df)
})
datos
plots<-map(c("pets", "breakfast", "frozen", "produce"),
function(d){
df<-cruce%>%
filter(department==d)%>%
group_by(order_id)%>%
count()
return(ggplot(df, aes(n))+
geom_histogram(bins=20)+
theme_minimal()+
ggtitle(paste("Products delivered per order in departament", d))
)
})
plots
plots[[1]]
plots[[2]]
plots[[3]]
plots[[4]]
seq_along(plots)
map(seq_along(plots),
function(g){
ggsave(sprintf("category %s.png", g), plots[[g]])
})
seq_along(plots)
map(seq_along(plots),
function(g){
ggsave(sprintf("category %s.png", g), plots[[g]])
})
getwd()
#Paquetes necesarios:
library(randomNames)
library(dplyr)
library(ggplot2)
library(readr)
library(purrr)
library(skimr)
nombres<-list.files("Base_Instacart", full.names=TRUE)
Datas<-map(nombres, read_csv)
names(Datas)<-substr(nombres, 16, nchar(nombres)-4)
Datas$departments
Datas$order_products__train
Datas$products
cruce<-Datas$order_products__train%>%
left_join(., Datas$products, by="product_id")%>%
left_join(., Datas$departments, by="department_id")
skim(cruce)$n_missing #información completa
#Pregunta 4):: Item b)
#Para el departamento frozen obtenga por pedido, la cantidad de productos del pedido
#(cada fila corresponde a un producto, por ende se debe realizar un conteo de la
#cantidad de filas por id del pedido) y realice un histograma de la cantidad de
#productos por pedido.
filtrofrozen<-cruce%>%
filter(department=="frozen")%>%
group_by(order_id)%>%
count()
ggplot(filtrofrozen, aes(n))+
geom_histogram(bins=20)+
theme_minimal()
#Pregunta 4):: Item c)
#Interesa tener la misma información anterior para los departamentos pets, breakfast,
#frozen, produce, de modo que cada departamento pueda recibir y accionar sus propios resultados.
#Utilice la función map para replicar lo anterior a cada departamento.
datos<-map(c("pets", "breakfast", "frozen", "produce"),
function(d){
df<-cruce%>%
filter(department==d)%>%
group_by(order_id)%>%
count()
return(df)
})
plots<-map(c("pets", "breakfast", "frozen", "produce"),
function(d){
df<-cruce%>%
filter(department==d)%>%
group_by(order_id)%>%
count()
return(ggplot(df, aes(n))+
geom_histogram(bins=20)+
theme_minimal()+
ggtitle(paste("Products delivered per order in departament", d))
)
})
#Pregunta 4):: Item d)
#Con la función ggsave() es posible guardar cada gráfico creado en el apartado anterior en
#formato png. Utilice la función map() para exportar los gráficos.
map(seq_along(plots),
function(g){
ggsave(sprintf("category %s.png", g), plots[[g]])
})
source('~/GitHub/Ayudantias-Diplomado/Ayudantía Programación y Funciones/Script Ayudantía.R', encoding = 'UTF-8')
